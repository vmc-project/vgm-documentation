<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on VGM</title>
    <link>/</link>
    <description>Recent content in Home on VGM</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Geometry Conversions</title>
      <link>/user-guide/geometry-conversions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/user-guide/geometry-conversions/</guid>
      <description>Volume hierarchy To convert native geometry from one geometry model to another one, the geometry has to be first imported in VGM (the native geometry objects will be mapped to the VGM interfaces) using the concrete VGM factory for this geometry model, and then exported using the VGM factory for the other geometry model.
To convert Geant4 geometry in ROOT:
#include &amp;#34;Geant4GM/volumes/Factory.h&amp;#34;  #include &amp;#34;RootGM/volumes/Factory.h&amp;#34;  #include &amp;#34;TGeoManager.h&amp;#34;  // Import Geant4 geometry to VGM  Geant4GM::Factory g4Factory; g4Factory.</description>
    </item>
    
    <item>
      <title>Geometry Construction</title>
      <link>/user-guide/geometry-construction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/user-guide/geometry-construction/</guid>
      <description>The VGM interfaces can be used to define geometry independently from a concrete geometry model. For example, the code below builds a world box volume:
#include &amp;#34;VGM/volumes/IFactory.h&amp;#34; #include &amp;#34;ClhepVGM/transform.h&amp;#34; using namespace VGM; MyDetectorConstruction::Construct(VGM::IFactory* factory) { double wSize = 10*m; GISolid* worldS = factory-&amp;gt;CreateBox(&amp;#34;worldS&amp;#34;, wSize, wSize, wSize); // create the world solid  GIVolume* worldV = factory-&amp;gt;CreateVolume(&amp;#34;worldV&amp;#34;, worldS, &amp;#34;Air&amp;#34;); // create the world volume  factory-&amp;gt;CreatePlacement(&amp;#34;world&amp;#34;, 0, worldV, 0, ClhepVGM::Identity()); // place the world volume  } Choosing the concrete factory (Geant4 or Root VGM factory) will then build the geometry of the chosen model ( Geant4 or Root):</description>
    </item>
    
    <item>
      <title>Options</title>
      <link>/user-guide/options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/user-guide/options/</guid>
      <description>Debug Debug printing can be switched on via the VGM::IFactory::SetDebug function:
IFactory&amp;amp; myFactory; myFactory.SetDebug(n); // where n=1 or 2; if 2 also object adresses are printed Ignore If geometry imported in VGM includes some solid not supported in VGM (eg. a user defined solid in Geant4), then VGM prints a warning and stops. It is however possible to let VGM continue by setting the option &amp;ldquo;Ignore&amp;rdquo; to the factory importing the geometry:</description>
    </item>
    
    <item>
      <title>vgm_test</title>
      <link>/installation/vgm_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/installation/vgm_test/</guid>
      <description>For convenience, the VGM test program is defined as a standard Geant4 application example though this is not the only way of VGM use. (See the VGM User Guide about other ways of VGM application.)
The test program includes several geometry setups, each one concentrated on particular geometry features:
Solids - builds all VGM supported solids Placements[2] - test for placements via translation and rotation Reflections - test positions with reflection for all solids AssembliesN - test volume assemblies N=1 - assemblies in more levels N=2 - assemblies with reflection BooleansSolidsM - test Boolean solids M=1 - Boolean solids with no displacement M=2 - Boolean solids with displacement including translation and rotation M=3 - Boolean solids with displacement including reflection DisplacedSolidsN - test solids with displacement N=1 - boxes with displacement N=2 - as BooleanSolids2 but with displacement is defined via Displaced solid ScaledSolids - test all VGM supported solids with scaled trasnformation and the same placements as in Reflections NewSolid - builds selected solid individually MultiUnion - test for multi union solid Special - loads external geometry from geometry.</description>
    </item>
    
    <item>
      <title>XML</title>
      <link>/user-guide/xml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/user-guide/xml/</guid>
      <description>The VGM geometry can be exported to XML in the AGDD or GDML format. The complying with the XML schema is embedded in the VGM XML exporter code itself, no external XML parser is then needed.
#include &amp;#34;XmlVGM/AGDDExporter.h&amp;#34; XmlVGM::AGDDExporter xmlExporter1(&amp;amp;theFactory); xmlExporter1.GenerateXMLGeometry(); // Export geometry to AGDD  #include &amp;#34;XmlVGM/GDMLExporter.h&amp;#34; XmlVGM::GDMLExporter xmlExporter2(&amp;amp;theFactory); xmlExporter2.GenerateXMLGeometry(); // Export geometry to GDML The export from native geometries (Geant4, Root) to XML is demonstrated in examples E03 and E04.</description>
    </item>
    
    <item>
      <title>Copyright</title>
      <link>/copyright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/copyright/</guid>
      <description>Copyright (C) 2019 CERN and copyright holders of VMC Project. This software is distributed under the terms of the GNU General Public License v3 (GPL Version 3), copied verbatim in the file &amp;ldquo;LICENSE&amp;rdquo;.
Copyright holders Institutions:
 European Organization for Nuclear Research (CERN), Geneva, Switzerland Institut de Physique Nucléaire dʼOrsay (IPNO), Université Paris-Sud, CNRS-IN2P3, Orsay, France Ruprecht Karls Universitaet Heidelberg (DE)*  </description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/credits/</guid>
      <description>The concept of Virtual MonteCarlo has been developed by the ALICE Software Project . Authors: R.Brun1, F.Carminati1, I.Hrivnacova2, A.Morsch1
The integration with TGeo, G4Root: A. Gheata1
The multiple VMC engines: B. Volkel1,3
1European Organization for Nuclear Research (CERN), Geneva, Switzerland 2Institut de Physique Nucléaire dʼOrsay (IPNO), Université Paris-Sud, CNRS-IN2P3, Orsay, France 3Ruprecht Karls Universitaet Heidelberg (DE)</description>
    </item>
    
  </channel>
</rss>