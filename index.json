[{"uri":"https://vmc-project.github.io/vgm-documentation/download/","title":"Download","tags":[],"description":"","content":"The VGM package sources are available from the vmc-project organization in GitHub.\nDevelopment version:\ngit clone http://github.com/vmc-project/vgm.git Tested with Root 6.22/06, Geant4 10.7 (with embedded CLHEP 2.4.4.0)\nThe last tagged version (4.9):\ncd vgm git checkout v4-9 Tested with Root 6.22/06, Geant4 10.7 (with embedded CLHEP 2.4.4.0)\nThe list of new developments, bug fixes and the required versions of ROOT and Geant4 for each version can be found in the VGMhistory.txt file.\n"},{"uri":"https://vmc-project.github.io/vgm-documentation/user-guide/geometry-conversions/","title":"Geometry Conversions","tags":[],"description":"","content":"Volume hierarchy To convert native geometry from one geometry model to another one, the geometry has to be first imported in VGM (the native geometry objects will be mapped to the VGM interfaces) using the concrete VGM factory for this geometry model, and then exported using the VGM factory for the other geometry model.\nTo convert Geant4 geometry in ROOT:\n#include \u0026#34;Geant4GM/volumes/Factory.h\u0026#34;  #include \u0026#34;RootGM/volumes/Factory.h\u0026#34;  #include \u0026#34;TGeoManager.h\u0026#34;  // Import Geant4 geometry to VGM  Geant4GM::Factory g4Factory; g4Factory.Import(physiWorld); // where physiWorld is of G4VPhysicalVolume* type  // Export VGM geometry to Root  RootGM::Factory rtFactory; g4Factory.Export(\u0026amp;rtFactory); gGeoManager-\u0026gt;CloseGeometry(); return rtFactory.World(); // returns Root top node, of TGeoNode* type The geometry conversions between Geant4 and ROOT geometry models are demonstrated in the provided examples E01 and E02.\nSingle Solid Since version 4.4, it is also to use VGM to convert a single solid from one geometry model into another one:\nXFactory xFactory; YFactory yFactory; xFactory.Import(xsolid); xFactory.Export(yFactory); YSolid* ysolid = yFactory.Solid(); "},{"uri":"https://vmc-project.github.io/vgm-documentation/user-guide/geometry-construction/","title":"Geometry Construction","tags":[],"description":"","content":"The VGM interfaces can be used to define geometry independently from a concrete geometry model. For example, the code below builds a world box volume:\n#include \u0026#34;VGM/volumes/IFactory.h\u0026#34; #include \u0026#34;ClhepVGM/transform.h\u0026#34; using namespace VGM; MyDetectorConstruction::Construct(VGM::IFactory* factory) { double wSize = 10*m; GISolid* worldS = factory-\u0026gt;CreateBox(\u0026#34;worldS\u0026#34;, wSize, wSize, wSize); // create the world solid  GIVolume* worldV = factory-\u0026gt;CreateVolume(\u0026#34;worldV\u0026#34;, worldS, \u0026#34;Air\u0026#34;); // create the world volume  factory-\u0026gt;CreatePlacement(\u0026#34;world\u0026#34;, 0, worldV, 0, ClhepVGM::Identity()); // place the world volume  } Choosing the concrete factory (Geant4 or Root VGM factory) will then build the geometry of the chosen model ( Geant4 or Root):\n#include \u0026#34;Geant4GM/volumes/Factory.h\u0026#34; MyDetectorConstruction myDetectorConstruction; Geant4GM::Factory theFactory; myDetectorConstruction-\u0026gt;Construct(\u0026amp;theFactory); // Geant4 geometry will be built  #include \u0026#34;RootGM/volumes/Factory.h\u0026#34; MyDetectorConstruction myDetectorConstruction; RootGM::Factory theFactory; myDetectorConstruction-\u0026gt;Construct(\u0026amp;theFactory); // Root geometry will be built "},{"uri":"https://vmc-project.github.io/vgm-documentation/installation/","title":"Installation","tags":[],"description":"","content":"Configuration The CMake build system will build and install VGM like a typical CMake\u0026rsquo;ed package.\nFirst we will assume that the VGM source has been downloaded in a directory /my_path, so that the VGM directory packages sits in a subdirectory\n /my_path/vgm/packages  We refer to /my_path/vgm directory as the source directory. The next step is to create a directory in which to configure and run the build and store the build products. This directory should not be the same as, or inside, the source directory. In this guide, we create this build directory alongside our source directory:\n cd /my_path mkdir vgm_build ls vgm vgm_build  To configure the build, change into the build directory and run CMake:\n cd /my_path/vgm_build cmake -DCMAKE_INSTALL_PREFIX=/my_path/vgm_install /my_path/vgm  Here, the CMake Variable CMAKE_INSTALL_PREFIX is used to set the install directory, the directory under which the VGM libraries and headers will be installed. It must be an absolute path. The second argument to CMake is the path to the source directory. In this example, we have used the absolute path to the source directory, but you can also use the relative path from your build directory to your source directory.\nConfiguration Options Additional arguments may be passed to CMake to (in)activate optional components of VGM, or tune the build and install parameters. See vgm/CMakeList.txt for details of these options. If you run CMake and decide afterwards you want to activate additional options, simply rerun CMake passing it those options.\nOn executing this CMake command, it will run, configuring the build and generating Unix Makefiles to perform the actual build.\nOverview of available options and their default values:\n WITH_GEANT4 \u0026quot;Build Geant4 dependent subpackage (Geant4GM)\u0026quot; ON WITH_ROOT \u0026quot;Build Root dependent subpackage(RootGM)\u0026quot; ON WITH_EXAMPLES \u0026quot;Build examples\u0026quot; ON WITH_TEST \u0026quot;Build test\u0026quot; OFF WITH_G4ROOT \u0026quot;Build test with G4Root\u0026quot; OFF INSTALL_EXAMPLES \u0026quot;Install examples\u0026quot; ON  Compilation After the configuration has run, to run the build, simply execute make in the build directory:\n make -jN  where N is the number of parallel jobs you require (e.g. if your machine has a dual core processor, you could set N to 2).\nThe build will now run, and will output information on the progress of the build and current operations. If you need more output to help resolve issues or simply for information, run make as\n make -jN VERBOSE=1  Installation Once the build has completed, you can install VGM to the directory you specified earlier in CMAKE_INSTALL_PREFIX by running\n make install  in the build directory. The libraries and headers are installed under your chosen install prefix in a standard Unix-style hierarchy of directories\nTest When the WITH_TEST cmake option is activated, the vgm_test program is automatically built in the build directory, in /my_path/vgm_build/test and installed in /my_path/vgm_install/bin.\nIt can be run for example in this way:\nvgm_test VGM Geant4 Root noXML Solids  See vgm_test for all available options.\nAll test configurations can be run via the test_suite.sh script:\n./test_suite.sh  which internally runs three test suites:\n./test1_suite.sh ./test2_suite.sh ./test3_suite.sh  The test output, stored in the log directory, can be then compared with the reference output in the log_ref directory.\nOptionally, the test can be built with the G4Root package, see: https://vmc-project.github.io/user-guide/g4root/ when the WITH_G4ROOT cmake option is activated.\nNote that even though also Geant4 VMC can be build with VGM, there is no circular dependence between these packages, as G4Root is lower level package which does not depend on the Geant4 VMC library.\nTo build both VGM with G4Root and Geant4 VMC with VGM, you can proceed in this way:\n install VGM without test install Geant4 VMC with VGM build and install VGM test against G4Root installed with Geant4 VMC  If you are not interested in using Geant4 VMC then you can proceed in this way:\n Download Geant4 VMC and install only G4Root Install VGM with test against G4Root installed  Aknowledgement\nThe CMake build for Virtual Geometry Model is a result of a merge of the CMake configuration files kindly provided by Florian Uhlig, GSI and Pere Mato, CERN.\n  vgm_test   "},{"uri":"https://vmc-project.github.io/vgm-documentation/user-guide/options/","title":"Options","tags":[],"description":"","content":"Debug Debug printing can be switched on via the VGM::IFactory::SetDebug function:\nIFactory\u0026amp; myFactory; myFactory.SetDebug(n); // where n=1 or 2; if 2 also object adresses are printed Ignore If geometry imported in VGM includes some solid not supported in VGM (eg. a user defined solid in Geant4), then VGM prints a warning and stops. It is however possible to let VGM continue by setting the option \u0026ldquo;Ignore\u0026rdquo; to the factory importing the geometry:\nIFactory\u0026amp; myFactory; myFactory.SetIgnore(true); BestMatch This option is used only in the context of a division with gaps in the ROOT geometry. As there is not an equivalent placement in Root, this feature is emulated by default via an intermediate division without gaps and a placement of the cell volumes. This however results in a different volume hierarchy than in the source (Geant4 geometry).\nWhen a new, \u0026ldquo;bestMatch\u0026rdquo; option is selected, this feature is implemented via simple placements of the cells in the mother volume, what may be however ineffiecient in case of a large number of divisions.\nIFactory\u0026amp; myFactory; myFactory.SetBestMatch(true); "},{"uri":"https://vmc-project.github.io/vgm-documentation/installation/vgm_test/","title":"vgm_test","tags":[],"description":"","content":"For convenience, the VGM test program is defined as a standard Geant4 application example though this is not the only way of VGM use. (See the VGM User Guide about other ways of VGM application.)\nThe test program includes several geometry setups, each one concentrated on particular geometry features:\nSolids - builds all VGM supported solids Placements[2] - test for placements via translation and rotation Reflections - test positions with reflection for all solids AssembliesN - test volume assemblies N=1 - assemblies in more levels N=2 - assemblies with reflection BooleansSolidsM - test Boolean solids M=1 - Boolean solids with no displacement M=2 - Boolean solids with displacement including translation and rotation M=3 - Boolean solids with displacement including reflection DisplacedSolidsN - test solids with displacement N=1 - boxes with displacement N=2 - as BooleanSolids2 but with displacement is defined via Displaced solid ScaledSolids - test all VGM supported solids with scaled trasnformation and the same placements as in Reflections NewSolid - builds selected solid individually MultiUnion - test for multi union solid Special - loads external geometry from geometry.root file; can be run only with input = Root  For each test, the geometry definition is provided in three ways:\n via VGM interfaces via Geant4 via Root  See classes TstGeometryViaXXX, XXX = VGM, Geant4, Root.\nThe selection of the test configuration is made via arguments passed into main program:\nUsage: vgm_test inputType inputFactory outputFactory outputXML selectedTest [debug] [openAngle] [noVis] [run] [rootNavig] inputType = VGM, AGDD, Geant4, Root inputFactory = AGDD, Geant4, Root outputFactory = Geant4, Root, None outputXML = AGDD, GDML, G4GDML, noXML selectedTest = Solids, NewSolid, Placements[2], Reflections AssembliesN, BooleanSolidsM, ScaledSolids, MultiUnion, Special, DisplacedSolidN where N = 1, 2; M = 1, 2, 3 debug = if specified the factories operate in debug mode ignore = if specified the factories operate in ignore mode bestMatch = if specified the factories operate in bestMatch mode openAngle = if specified, solids like tubs, cons etc. are built with open azimuthal angle noVis = no visualisation run = run with the generator defined in macro/den_selectedTest.mac rootNavig = use navigation via G4Root singleMode = activate single mode conversion (only convert solids from built geometry one by one)  For example\nvgm_test VGM Geant4 Root noXML Solids  Geant4 geometry for Solids test will be built via the VGM factory and exported in Root.\nAll test configurations can be run via test_suite.sh shell script. See more details about test suites in the Installation section.\nThough this test program demonstrates use of VGM in all possible ways, it was written for the purpose of testing and is not meant to substitute an example of VGM use. Examples how to use VGM can be found in the dedicated Examples section.\n"},{"uri":"https://vmc-project.github.io/vgm-documentation/user-guide/xml/","title":"XML","tags":[],"description":"","content":"The VGM geometry can be exported to XML in the AGDD or GDML format. The complying with the XML schema is embedded in the VGM XML exporter code itself, no external XML parser is then needed.\n#include \u0026#34;XmlVGM/AGDDExporter.h\u0026#34; XmlVGM::AGDDExporter xmlExporter1(\u0026amp;theFactory); xmlExporter1.GenerateXMLGeometry(); // Export geometry to AGDD  #include \u0026#34;XmlVGM/GDMLExporter.h\u0026#34; XmlVGM::GDMLExporter xmlExporter2(\u0026amp;theFactory); xmlExporter2.GenerateXMLGeometry(); // Export geometry to GDML The export from native geometries (Geant4, Root) to XML is demonstrated in examples E03 and E04. The exported XML files (both AGDD and GDML) can be then viewed with the GraXML tool.\n"},{"uri":"https://vmc-project.github.io/vgm-documentation/user-guide/","title":"User Guide","tags":[],"description":"","content":"  Geometry Conversions     Geometry Construction     Options     XML     "},{"uri":"https://vmc-project.github.io/vgm-documentation/reference/","title":"Reference","tags":[],"description":"","content":"Source code documentation is generated from the source code by Doxygen for each release.\n"},{"uri":"https://vmc-project.github.io/vgm-documentation/examples/","title":"Examples","tags":[],"description":"","content":"The VGM examples demonstrate use of VGM for conversion of existing native geometries.\nE01: Geant4 -\u0026gt; Root E02: Root -\u0026gt; Geant4 E03: Geant4 -\u0026gt; XML E04: Root -\u0026gt; XML  The Geant4 basic example B4a source is used in E01, E02, E03 and the ROOT rootgeom.C macro is used in E04. The geometry conversion in E01, E02, E03 examples is performed in src/B4DetectorConstruction.cc class and in E04 example in rootgeom.cxx.\nSee the code within the comment lines\n// VGM demo and\n// end VGM demo in these files.\n"},{"uri":"https://vmc-project.github.io/vgm-documentation/support/","title":"Support","tags":[],"description":"","content":"Bug reports Report a bug in the VGM project on GitHub\nMailing list root-vmc@cern.ch\nSee how to subscribe/unsubscribe at the VMC project documentation\n"},{"uri":"https://vmc-project.github.io/vgm-documentation/publications/","title":"Publications","tags":[],"description":"","content":"Please refer to the papers below when publishing results base on simulations with VMC:\nReference paper\nI. Hrivnacova et al 2008 J. Phys.: Conf. Ser. 119 042016\n All publications listed in time reversed order:\n  The Virtual Geometry Model (2019),\nI. Hrivnacova 2019 EPJ Web of Conferences 245, 02014 (2020)\ndoi: 10.1051/epjconf/202024502014\n  The Virtual Geometry Model (2008), I. Hrivnacova et al 2008 J. Phys.: Conf. Ser. 119 042016\ndoi: 10.1088/1742-6596/119/4/042016\n  The Virtual Geometry Model (2004),\nI. Hrivnacova 2004 Computing in High Energy and Nuclear Physics (Interlaken) Id 387 doi: 10.5170/CERN-2005-002.345\n  "},{"uri":"https://vmc-project.github.io/vgm-documentation/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://vmc-project.github.io/vgm-documentation/","title":"Home","tags":[],"description":"","content":"Virtual Geometry Model Virtual Geometry Model (VGM) is a geometry conversion tool, actually providing conversion between Geant4 and ROOT TGeo geometry models. Its design allows inclusion of another geometry model by implementing a single sub-module instead of writing bilateral converters for all already supported models.\nVGM was implemented in the context of Geant4 VMC. In 2017, it was moved from SourceForge into GitHub to become part of the VMC project packages in the vmc-project organization.\nReference paper\nI. Hrivnacova et al 2008 J. Phys.: Conf. Ser. 119 042016\n Contact: ivana.hrivnacova@ijclab.in2p3.frLast update: 19/02/2021\n"},{"uri":"https://vmc-project.github.io/vgm-documentation/tags/","title":"Tags","tags":[],"description":"","content":""}]